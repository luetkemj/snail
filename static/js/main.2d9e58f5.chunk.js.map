{"version":3,"sources":["lib/grid/math.js","constants/game.constants.js","lib/canvas.js","App.js","index.js"],"names":["getNeighbor","s","dir","row","col","topLeft","s1","s2","Math","min","bottomRight","max","cellToId","cell","idToCell","id","coords","split","parseInt","getRow","tlsq","brsq","push","keyBy","getAllSquares","squares","column","getColumn","each","COLUMNS","ROWS","MAP_HEIGHT","MAP_WIDTH","observeBoundaries","loc","getInitialCtx","canvasRef","ctx","current","getContext","font","textBaseline","drawPlayerHalo","player","cellIds","cells","forEach","cellId","open","opacity","cellId1","cellId2","cell1","cell2","x","pow","y","floor","sqrt","getCellDistance","fillStyle","fillRect","drunkardsWalk","randomStart","dig","directions","_","sample","ceil","digger","nextCellId","times","drunkardsWalk2","CELLS","CELL_IDS","Object","keys","PLAYER","find","renderGame","clearRect","debug","fillText","drawMap","drawPlayer","ReactDOM","render","useRef","useState","algorithm","iterations","startingLocation","randomStartingLocation","settings","setSettings","handleSettingChange","path","value","newSettings","useEffect","movePlayer","newLoc","newLocId","useEventListener","key","includes","String","className","htmlFor","name","onChange","e","target","type","checked","onClick","algorithms","dw","dw2","width","height","ref","document","getElementById"],"mappings":"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","file":"static/js/main.2d9e58f5.chunk.js","sourcesContent":["import { each, keyBy, map, orderBy, uniq } from \"lodash\";\n\nexport const getCellDistance = (cellId1, cellId2) => {\n  const cell1 = idToCell(cellId1);\n  const cell2 = idToCell(cellId2);\n  const x = Math.pow(cell2.col - cell1.col, 2);\n  const y = Math.pow(cell2.row - cell1.row, 2);\n  return Math.floor(Math.sqrt(x + y));\n};\n\n// 00, 10, 20\n// 01, 11, 21\n// 02, 12, 22\n// dir\n// NW  N  NE\n// W       E\n// SW  S  SE\n// 01 col, row\n// { col: 0, row: 1 }\nexport const getNeighbor = (s, dir) => {\n  switch (dir) {\n    case \"N\":\n      return { ...s, row: s.row - 1 };\n    case \"NE\":\n      return { col: s.col + 1, row: s.row - 1 };\n    case \"E\":\n      return { ...s, col: s.col + 1 };\n    case \"SE\":\n      return { col: s.col + 1, row: s.row + 1 };\n    case \"S\":\n      return { ...s, row: s.row + 1 };\n    case \"SW\":\n      return { col: s.col - 1, row: s.row + 1 };\n    case \"W\":\n      return { ...s, col: s.col - 1 };\n    case \"NW\":\n      return { col: s.col - 1, row: s.row - 1 };\n\n    default:\n      return s;\n  }\n};\n\n// Given any 2 squares on a grid\n// return the top left square of their rectangle\n// ex: given 20 and 02 will return 00 from the square grid below\n// 00, 10, 20\n// 01, 11, 21\n// 02, 12, 22\nexport const topLeft = (s1, s2) => {\n  return {\n    col: Math.min(s1.col, s2.col),\n    row: Math.min(s1.row, s2.row)\n  };\n};\n\n// Given any 2 squares on a grid\n// return the bottom right square of their rectangle\n// ex: given 20 and 02 will return 22 from the square grid below\n// 00, 10, 20\n// 01, 11, 21\n// 02, 12, 22\nexport const bottomRight = (s1, s2) => {\n  return {\n    col: Math.max(s1.col, s2.col),\n    row: Math.max(s1.row, s2.row)\n  };\n};\n\nexport const cellToId = cell => `${cell.col},${cell.row}`;\n\nexport const idToCell = id => {\n  const coords = id.split(\",\");\n  return { col: parseInt(coords[0], 10), row: parseInt(coords[1], 10) };\n};\n\n// Given two squares on a grid\n// return a horizontal L->R row from the top left sq of their rectangle\nexport const getRow = (s1, s2) => {\n  const tlsq = topLeft(s1, s2);\n  const brsq = bottomRight(s1, s2);\n  const row = [];\n\n  let col = tlsq.col;\n\n  while (col <= brsq.col) {\n    row.push({ col: col, row: tlsq.row });\n    col = col + 1;\n  }\n\n  return keyBy(row, cellToId);\n};\n\n// Given two squares on a grid\n// return a vertical T->B column from the top left sq of their rectangle\nexport const getColumn = (s1, s2) => {\n  const tlsq = topLeft(s1, s2);\n  const brsq = bottomRight(s1, s2);\n  const column = [];\n\n  let row = tlsq.row;\n\n  while (row <= brsq.row) {\n    column.push({ col: tlsq.col, row });\n    row = row + 1;\n  }\n\n  return keyBy(column, cellToId);\n};\n\n// given two squares on a grid, returns all squares within their rectangle\n// ex: given 10 and 02 will return the bracketed sqaures below\n//   [00], [10],  20\n//   [01], [11],  21\n//   [02], [12],  22\nexport const getAllSquares = (s1, s2) => {\n  const tlsq = topLeft(s1, s2);\n  const brsq = bottomRight(s1, s2);\n\n  let squares = {};\n\n  const column = getColumn(tlsq, brsq);\n\n  each(column, s => (squares = { ...squares, ...getRow(s, brsq) }));\n\n  return keyBy(squares, cellToId);\n};\n\nexport const getMaxColumn = squares => {\n  return Math.max(...map(squares, s => s.col));\n};\n\nexport const getMinColumn = squares => {\n  return Math.min(...map(squares, s => s.col));\n};\n\nexport const getMaxRow = squares => {\n  return Math.max(...map(squares, s => s.row));\n};\n\nexport const getMinRow = squares => {\n  return Math.min(...map(squares, s => s.row));\n};\n\n// given a collection of squares on a grid return the rows with at least one square\nexport const getRowsInCollection = squares => {\n  return orderBy(uniq(map(squares, s => s.row)));\n};\n\n// given a collection of squares on a grid return the columns with at least one square\nexport const getColumnsInCollection = squares => {\n  return orderBy(uniq(map(squares, s => s.col)));\n};\n\n// get boundingCorners from a collection\nexport const getBoundingCorners = squares => ({\n  topLeft: `${getMinColumn(squares)},${getMinRow(squares)}`,\n  topRight: `${getMaxColumn(squares)},${getMinRow(squares)}`,\n  bottomRight: `${getMaxColumn(squares)},${getMaxRow(squares)}`,\n  bottomLeft: `${getMinColumn(squares)},${getMaxRow(squares)}`\n});\n\nexport const getUnselectedSquaresInBoundingBox = squares => {\n  const corners = getBoundingCorners(squares);\n\n  const allSquareIds = map(squares, cellToId);\n\n  const allSquaresInBoundingBox = getAllSquares(\n    idToCell(corners.topLeft),\n    idToCell(corners.bottomRight)\n  );\n\n  const rows = getRowsInCollection(allSquaresInBoundingBox);\n\n  const unselected = {\n    all: [],\n    rows: {}\n  };\n\n  each(rows, r => {\n    const idsInRow = map(\n      getRow(\n        { col: idToCell(corners.topLeft).col, row: r },\n        idToCell(corners.bottomRight)\n      ),\n      cellToId\n    );\n\n    unselected.rows[r] = [];\n\n    each(idsInRow, sId => {\n      if (!allSquareIds.includes(sId)) {\n        unselected.all.push(sId);\n        unselected.rows[r].push(sId);\n      }\n    });\n  });\n\n  return unselected;\n};\n","export const TILE_SIZE = 20;\nexport const CELL_WIDTH = TILE_SIZE;\nexport const CELL_HEIGHT = TILE_SIZE;\nexport const COLUMNS = 60;\nexport const ROWS = 40;\nexport const MAP_HEIGHT = CELL_HEIGHT * ROWS;\nexport const MAP_WIDTH = CELL_WIDTH * COLUMNS;\n","import _ from \"lodash\";\n\nimport {\n  // getAllSquares,\n  getCellDistance,\n  getNeighbor,\n  cellToId,\n  idToCell\n} from \"./grid/math\";\n\nimport {\n  TILE_SIZE,\n  CELL_WIDTH,\n  CELL_HEIGHT,\n  COLUMNS,\n  ROWS\n  // MAP_HEIGHT,\n  // MAP_WIDTH\n} from \"../constants/game.constants\";\n\nexport const observeBoundaries = id => {\n  const loc = idToCell(id);\n  if (loc.col < 0) return false;\n  if (loc.col >= COLUMNS) return false;\n  if (loc.row < 0) return false;\n  if (loc.row >= ROWS) return false;\n\n  return true;\n};\n\nexport const getInitialCtx = canvasRef => {\n  const ctx = canvasRef.current.getContext(\"2d\");\n  ctx.font = `${TILE_SIZE}px serif`;\n  ctx.textBaseline = \"top\";\n  return ctx;\n};\n\nexport const drawPlayer = (ctx, player) => {\n  ctx.fillStyle = `rgb(255,255,255,1)`;\n  ctx.fillText(\n    \"@\",\n    player.loc.col * CELL_WIDTH,\n    player.loc.row * CELL_HEIGHT,\n    CELL_WIDTH\n  );\n};\n\nexport const drawPlayerHalo = (ctx, player, cellIds, cells) => {\n  // lighting halo (do elsewhere)\n  // from player location build halo of cell ids\n  // get distance on all cells in halo\n  // if they are open render light\n  cellIds.forEach(cellId => {\n    const cell = cells[cellId];\n    if (cell.open) {\n      const opacity =\n        ((getCellDistance(cellToId(player.loc), cellId) - 5) * -1) / 7;\n      ctx.fillStyle = `rgb(85,65,13,${opacity})`;\n      ctx.fillRect(\n        cell.col * CELL_WIDTH,\n        cell.row * CELL_HEIGHT,\n        CELL_WIDTH,\n        CELL_HEIGHT\n      );\n    }\n  });\n};\n\n// cellIds ['id', ...]\n// cells { id: {col: 0, row: 0} }\n// player { loc: {col: 0, row: 0} }\n// debug boolean\nexport const drawMap = (ctx, cellIds, cells, player, debug) => {\n  cellIds.forEach(cellId => {\n    const cell = cells[cellId];\n\n    ctx.fillStyle = cell.open ? `rgb(10,10,10)` : `rgb(100,100,100)`;\n    ctx.fillRect(\n      cell.col * CELL_WIDTH,\n      cell.row * CELL_HEIGHT,\n      CELL_WIDTH,\n      CELL_HEIGHT\n    );\n\n    if (debug) {\n      ctx.fillStyle = `rgb(255,255,255, .5)`;\n      ctx.font = \"8px serif\";\n      ctx.fillText(cellId, cell.col * CELL_WIDTH, cell.row * CELL_HEIGHT);\n    }\n  });\n};\n\nexport const drunkardsWalk = (cellIds, cells, randomStart = false) => {\n  const dig = cell => (cell.open = true);\n  const directions = [\"N\", \"E\", \"S\", \"W\"];\n\n  // Pick start location\n  let current = randomStart\n    ? _.sample(cellIds)\n    : `${Math.ceil(COLUMNS / 2)},${Math.ceil(ROWS / 2)}`;\n\n  dig(cells[current]);\n\n  const digger = () => {\n    // get the next cell Id\n    const nextCellId = cellToId(\n      getNeighbor(cells[current], _.sample(directions))\n    );\n\n    // test that it is in bounds\n    if (observeBoundaries(nextCellId)) {\n      if (!cells[nextCellId].open) {\n        dig(cells[nextCellId]);\n        current = nextCellId;\n      }\n    }\n  };\n\n  _.times(2500, digger);\n};\n\nexport const drunkardsWalk2 = (cellIds, cells, randomStart = false) => {\n  const dig = cell => (cell.open = true);\n  const directions = [\"N\", \"E\", \"S\", \"W\"];\n\n  // Pick start location\n  let current = randomStart\n    ? _.sample(cellIds)\n    : `${Math.ceil(COLUMNS / 2)},${Math.ceil(ROWS / 2)}`;\n\n  dig(cells[current]);\n\n  const digger = () => {\n    // get the next cell Id\n    const nextCellId = cellToId(\n      getNeighbor(cells[current], _.sample(directions))\n    );\n\n    // test that it is in bounds\n    if (observeBoundaries(nextCellId)) {\n      dig(cells[nextCellId]);\n      current = nextCellId;\n    }\n  };\n\n  _.times(1500, digger);\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport useEventListener from \"@use-it/event-listener\";\nimport { cellToId, getAllSquares, getNeighbor } from \"./lib/grid/math\";\nimport { observeBoundaries, drawPlayerHalo } from \"./lib/canvas\";\nimport _ from \"lodash\";\n\nimport \"./App.css\";\n\nimport {\n  COLUMNS,\n  ROWS,\n  MAP_HEIGHT,\n  MAP_WIDTH\n} from \"./constants/game.constants\";\n\nimport {\n  drawMap,\n  drawPlayer,\n  getInitialCtx,\n  drunkardsWalk,\n  drunkardsWalk2\n} from \"./lib/canvas\";\n\nlet CELLS = getAllSquares(\n  { col: 0, row: 0, open: false },\n  { col: COLUMNS, row: ROWS }\n);\nconst CELL_IDS = Object.keys(CELLS);\n\n// _.times(30, () => drunkardsWalk(CELL_IDS, CELLS, true));\n// drunkardsWalk(CELL_IDS, CELLS);\ndrunkardsWalk2(CELL_IDS, CELLS);\n\nlet PLAYER = {\n  loc: _.find(CELLS, cell => cell.open)\n};\n\nlet ctx;\n\nconst renderGame = ctx => {\n  ctx.clearRect(0, 0, MAP_WIDTH, MAP_HEIGHT);\n  drawMap(ctx, CELL_IDS, CELLS, PLAYER);\n  drawPlayerHalo(ctx, PLAYER, CELL_IDS, CELLS);\n  drawPlayer(ctx, PLAYER);\n};\n\nexport default function App() {\n  const canvasRef = useRef(null);\n  const [settings, setSettings] = useState({\n    algorithm: \"dw2\",\n    iterations: 1,\n    startingLocation: \"30,20\",\n    randomStartingLocation: false\n  });\n\n  const rebuild = () => {\n    CELLS = getAllSquares(\n      { col: 0, row: 0, open: false },\n      { col: COLUMNS, row: ROWS }\n    );\n\n    const algorithms = {\n      dw: drunkardsWalk,\n      dw2: drunkardsWalk2\n    };\n\n    _.times(settings.iterations, () =>\n      algorithms[settings.algorithm](\n        CELL_IDS,\n        CELLS,\n        settings.randomStartingLocation === \"on\"\n      )\n    );\n\n    PLAYER = {\n      loc: _.find(CELLS, cell => cell.open)\n    };\n\n    renderGame(ctx);\n  };\n\n  const handleSettingChange = (path, value) => {\n    const newSettings = { ...settings };\n    newSettings[path] = value;\n    setSettings(newSettings);\n  };\n\n  useEffect(() => {\n    ctx = getInitialCtx(canvasRef);\n    renderGame(ctx);\n  });\n\n  const movePlayer = dir => {\n    const newLoc = getNeighbor(PLAYER.loc, dir);\n    const newLocId = cellToId(newLoc);\n    if (!observeBoundaries(newLocId)) return;\n    if (!CELLS[newLocId].open) return;\n\n    PLAYER.loc = newLoc;\n\n    renderGame(ctx);\n  };\n\n  const handleKeyDown = ({ key }) => {\n    // key bindings\n    const PLAYER_MOVE_N = [\"ArrowUp\", \"8\", \"w\"];\n    const PLAYER_MOVE_E = [\"ArrowRight\", \"6\", \"d\"];\n    const PLAYER_MOVE_S = [\"ArrowDown\", \"2\", \"s\"];\n    const PLAYER_MOVE_W = [\"ArrowLeft\", \"4\", \"a\"];\n\n    if (PLAYER_MOVE_N.includes(String(key))) {\n      movePlayer(\"N\");\n    }\n\n    if (PLAYER_MOVE_E.includes(String(key))) {\n      movePlayer(\"E\");\n    }\n\n    if (PLAYER_MOVE_S.includes(String(key))) {\n      movePlayer(\"S\");\n    }\n\n    if (PLAYER_MOVE_W.includes(String(key))) {\n      movePlayer(\"W\");\n    }\n  };\n\n  useEventListener(\"keydown\", handleKeyDown);\n\n  return (\n    <div className=\"App\">\n      <div className=\"settings\">\n        SETTINGS:\n        <label htmlFor=\"Algorithm\">Algorithm:</label>\n        <select\n          name=\"Algorithm\"\n          value={settings.algorithm}\n          onChange={e => {\n            handleSettingChange(\"algorithm\", e.target.value);\n          }}\n        >\n          <option value=\"dw\">Drunkards Walk</option>\n          <option value=\"dw2\">Drunkards Walk 2</option>\n        </select>\n        <label htmlFor=\"iterations\">Iterations:</label>\n        <input\n          name=\"iterations\"\n          type=\"number\"\n          min=\"1\"\n          max=\"1000\"\n          value={settings.iterations}\n          onChange={e => {\n            handleSettingChange(\"iterations\", e.target.value);\n          }}\n        />\n        {/* <label htmlFor=\"startLocation\">Starting Location:</label>\n        <input\n          type=\"text\"\n          name=\"startLocation\"\n          value={settings.startingLocation}\n          onChange={e => {\n            handleSettingChange(\"startingLocation\", e.target.value);\n          }}\n        /> */}\n        <label htmlFor=\"randomStart\">Random Starting Location</label>\n        <input\n          type=\"checkbox\"\n          name=\"randomStart\"\n          checked={settings.randomStartingLocation}\n          onChange={e => {\n            handleSettingChange(\n              \"randomStartingLocation\",\n              settings.randomStartingLocation === \"on\" ? \"\" : \"on\"\n            );\n          }}\n        />\n        <button onClick={rebuild}>Rebuild Map</button>\n      </div>\n      <canvas\n        width={MAP_WIDTH}\n        height={MAP_HEIGHT}\n        className=\"canvas\"\n        ref={canvasRef}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}